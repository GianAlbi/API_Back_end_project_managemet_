// Import validationResult from express-validator
// validationResult is a function that extracts validation results from requests
import { validationResult } from "express-validator";

// Import the ApiError class to handle standardized API errors
// ApiError allows throwing consistent errors throughout the application
import { ApiError } from "../utils/api-error.js";

// VALIDATION MIDDLEWARE
// This middleware checks if there are validation errors in the request data
export const validate = (req, res, next) => {
    
    // Extract validation errors from the request
    // validationResult(req) collects all errors generated by express-validator validators
    const errors = validationResult(req)

    // If there are no validation errors (the errors array is empty)
    if (errors.isEmpty()) {
        // Proceed to the next middleware or controller in the chain
        return next()
    }

    // If there are errors, prepare an array to collect extracted errors in custom format
    const extractedErrors = []

    // Iterate through all errors in the array and transform them into a more readable format
    // errors.array() converts errors into an array of standard objects
    errors.array().map((err) => 
        // For each error, create an object with:
        // - key: the field that failed validation (err.path)
        // - value: the associated error message (err.msg)
        extractedErrors.push({[err.path]: err.msg})
    );

    // If there are validation errors, throw an ApiError with:
    // - status code 422 (Unprocessable Entity - invalid data)
    // - descriptive message
    // - detailed array of errors for each field
    throw new ApiError(422, "Received data is not valid", extractedErrors);
};